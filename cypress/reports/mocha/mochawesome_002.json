{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2021-11-20T16:43:59.220Z",
    "end": "2021-11-20T16:49:19.146Z",
    "duration": 319926,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f2646d90-294c-4f21-867a-7d7b202ef65c",
      "title": "",
      "fullFile": "cypress/integration/Tumbler/Dashboard.spec.js",
      "file": "cypress/integration/Tumbler/Dashboard.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "224c15a9-535b-4c09-93ef-871f50bd1234",
          "title": "Dashboard",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Post a text post",
              "fullTitle": "Dashboard Post a text post",
              "timedOut": null,
              "duration": 107968,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let post = postsList.testpost1; // first thing I do I grab text post stored in sample data\nDashboardPOM.textPostButton().click(); // then click on Text \"Text\" at the dashboard to post a text\n// not sure of this yet but dealing with iframes is a headache to me \n// and this help to make it work because the iframe refers to another url\ncy.visit(\"https://www.tumblr.com/new/text\"); // here I assure that the post button is disabled as the post is still empty\n// then I fill the post data from the arbitrary data then press post\nPostboardPOM.postButton(\"button.button-area.disabled\").should('be.disabled').should(\"have.text\", \"Post\"); // ^___ this is a bad practice to send the selector as a string to the function\nPostboardPOM.postTitleDOM().type(post.title);\nPostboardPOM.postBodyDOM().type(post.textcontent);\nPostboardPOM.postTagsDOM().type(`${post.tags[0]} {enter}`);\nPostboardPOM.postTagsDOM().type(`${post.tags[1]} {enter}`);\nPostboardPOM.postButton('button.button-area').should('be.enabled').should(\"have.text\", \"Post\").click(); // redirection to the dashboard then open posts page\ncy.visit(\"https://www.tumblr.com/dashboard\");\nDashboardPOM.accountButton().click();\nDashboardPOM.accountLowerList().eq(0).click(); // this should be \"posts\" at the account menue\n// assure that tha post content are displayed at the screen \ncy.contains(post.title);\ncy.contains(post.textcontent);\ncy.contains(post.tags[0]);\ncy.contains(post.tags[1]); // it's a better practice that I check the data content at the post itself, the first post on the page  .\ncy.get('article').children('div').eq(1).find('h1').should('have.text', post.title);\ncy.get('article').children('div').eq(1).find('p').should('have.text', post.textcontent);",
              "err": {},
              "uuid": "fb45db0a-0f5b-4ec1-a83d-f8e01a1b1b0d",
              "parentUUID": "224c15a9-535b-4c09-93ef-871f50bd1234",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Post a Quote post",
              "fullTitle": "Dashboard Post a Quote post",
              "timedOut": null,
              "duration": 49257,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let post = postsList.quotepost1;\nDashboardPOM.quotePostButton().click();\ncy.visit(\"https://www.tumblr.com/new/quote\");\nPostboardPOM.postButton(\"button.button-area.disabled\").should('be.disabled').should(\"have.text\", \"Post\");\nPostboardPOM.quoteDOM().type(post.quote);\nPostboardPOM.sourceDOM().type(post.source);\nPostboardPOM.postTagsDOM().type(`${post.tags[0]} {enter}`);\nPostboardPOM.postTagsDOM().type(`${post.tags[1]} {enter}`);\nPostboardPOM.postButton('button.button-area').should('be.enabled').click();\ncy.visit(\"https://www.tumblr.com/dashboard\");\nDashboardPOM.accountButton().click();\nDashboardPOM.accountLowerList().eq(0).click();\ncy.contains(post.quote);\ncy.contains(post.source);\ncy.contains(post.tags[0]);\ncy.contains(post.tags[1]);\ncy.get('article').children('div').eq(1).find('span').should('have.text', post.quote);\ncy.get('article').children('div').eq(1).find('p').should('have.text', post.source);",
              "err": {},
              "uuid": "0fe6c4ec-bffa-4923-bddc-b8beddcec534",
              "parentUUID": "224c15a9-535b-4c09-93ef-871f50bd1234",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Post a Photo post",
              "fullTitle": "Dashboard Post a Photo post",
              "timedOut": null,
              "duration": 61878,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "DashboardPOM.photoPostButton().click();\ncy.visit(\"https://www.tumblr.com/new/photo\");\nPostboardPOM.postButton(\"button.button-area.disabled\").should('be.disabled').should(\"have.text\", \"Post\");\nconst imageFile = \"2.jpg\";\nPostboardPOM.photoDOM().attachFile(imageFile);\ncy.wait(300);\nPostboardPOM.postButton('button.button-area').should('be.enabled').click({\n  force: true\n});\nDashboardPOM.accountButton().click();\nDashboardPOM.accountLowerList().eq(0).click();\ncy.get('figure').first().find('div').children();",
              "err": {},
              "uuid": "5b680f79-62b4-4e41-b3df-e2f14bdf8cab",
              "parentUUID": "224c15a9-535b-4c09-93ef-871f50bd1234",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb45db0a-0f5b-4ec1-a83d-f8e01a1b1b0d",
            "0fe6c4ec-bffa-4923-bddc-b8beddcec534",
            "5b680f79-62b4-4e41-b3df-e2f14bdf8cab"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 219103,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6392b35d-7303-4e54-8f9b-32ecdf780492",
          "title": "logged",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Post a text post",
              "fullTitle": "logged Post a text post",
              "timedOut": null,
              "duration": 23170,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let post = postsList.testpost1; // first thing I do I grab text post stored in sample data\nDashboardPOM.textPostButton().click(); // then click on Text \"Text\" at the dashboard to post a text\n// not sure of this yet but dealing with iframes is a headache to me \n// and this help to make it work because the iframe refers to another url\ncy.visit(\"https://www.tumblr.com/new/text\"); // here I assure that the post button is disabled as the post is still empty\n// then I fill the post data from the arbitrary data then press post\nPostboardPOM.postButton(\"button.button-area.disabled\").should('be.disabled').should(\"have.text\", \"Post\"); // ^___ this is a bad practice to send the selector as a string to the function\nPostboardPOM.postTitleDOM().type(post.title);\nPostboardPOM.postBodyDOM().type(post.textcontent);\nPostboardPOM.postTagsDOM().type(`${post.tags[0]} {enter}`);\nPostboardPOM.postTagsDOM().type(`${post.tags[1]} {enter}`);\nPostboardPOM.postButton('button.button-area').should('be.enabled').should(\"have.text\", \"Post\").click(); // redirection to the dashboard then open posts page\ncy.visit(\"https://www.tumblr.com/dashboard\");\nDashboardPOM.accountButton().click();\nDashboardPOM.accountLowerList().eq(0).click(); // this should be \"posts\" at the account menue\n// assure that tha post content are displayed at the screen \ncy.contains(post.title);\ncy.contains(post.textcontent);\ncy.contains(post.tags[0]);\ncy.contains(post.tags[1]); // it's a better practice that I check the data content at the post itself, the first post on the page  .\ncy.get('article').children('div').eq(1).find('h1').should('have.text', post.title);\ncy.get('article').children('div').eq(1).find('p').should('have.text', post.textcontent);",
              "err": {},
              "uuid": "d3e68652-e91e-4982-9e0f-c7c9fbc41d46",
              "parentUUID": "6392b35d-7303-4e54-8f9b-32ecdf780492",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Post a Quote post",
              "fullTitle": "logged Post a Quote post",
              "timedOut": null,
              "duration": 28716,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let post = postsList.quotepost1;\nDashboardPOM.quotePostButton().click();\ncy.visit(\"https://www.tumblr.com/new/quote\");\nPostboardPOM.postButton(\"button.button-area.disabled\").should('be.disabled').should(\"have.text\", \"Post\");\nPostboardPOM.quoteDOM().type(post.quote);\nPostboardPOM.sourceDOM().type(post.source);\nPostboardPOM.postTagsDOM().type(`${post.tags[0]} {enter}`);\nPostboardPOM.postTagsDOM().type(`${post.tags[1]} {enter}`);\nPostboardPOM.postButton('button.button-area').should('be.enabled').click();\ncy.visit(\"https://www.tumblr.com/dashboard\");\nDashboardPOM.accountButton().click();\nDashboardPOM.accountLowerList().eq(0).click();\ncy.contains(post.quote);\ncy.contains(post.source);\ncy.contains(post.tags[0]);\ncy.contains(post.tags[1]);\ncy.get('article').children('div').eq(1).find('span').should('have.text', post.quote);\ncy.get('article').children('div').eq(1).find('p').should('have.text', post.source);",
              "err": {},
              "uuid": "03a5f280-f5d8-4fc3-b912-14bfc95e7e5a",
              "parentUUID": "6392b35d-7303-4e54-8f9b-32ecdf780492",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Post a Photo post",
              "fullTitle": "logged Post a Photo post",
              "timedOut": null,
              "duration": 40242,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "DashboardPOM.photoPostButton().click();\ncy.visit(\"https://www.tumblr.com/new/photo\");\nPostboardPOM.postButton(\"button.button-area.disabled\").should('be.disabled').should(\"have.text\", \"Post\");\nconst imageFile = \"2.jpg\";\nPostboardPOM.photoDOM().attachFile(imageFile);\ncy.wait(300);\nPostboardPOM.postButton('button.button-area').should('be.enabled').click({\n  force: true\n});\nDashboardPOM.accountButton().click();\nDashboardPOM.accountLowerList().eq(0).click();\ncy.get('figure').first().find('div').children();",
              "err": {},
              "uuid": "3ede029a-e3a7-49ee-889f-10a65a7db5c6",
              "parentUUID": "6392b35d-7303-4e54-8f9b-32ecdf780492",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d3e68652-e91e-4982-9e0f-c7c9fbc41d46",
            "03a5f280-f5d8-4fc3-b912-14bfc95e7e5a",
            "3ede029a-e3a7-49ee-889f-10a65a7db5c6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 92128,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quite": true,
        "overwrite": false,
        "video": true,
        "html": true,
        "json": true
      },
      "version": "6.0.1"
    }
  }
}